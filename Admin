package Project;

import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

public class Admin {
    private List<String> strategies;

    public Admin() {
        // Initialize strategies list
        strategies = new ArrayList<>();

        // Add some default strategies for demonstration purposes
        strategies.add ("\nDisaster Preparedness and Early Warning System: Organizations of new forecast system which are dependent on the status of weather-related hazards as well as the amplification of preparedness programmed, and the development of good disaster response plans can help to lessen the number of casualties and destroyed property during natural disaster like hurricane, strome, and wildfire.");


        strategies.add("\nReforestation and Afforestation: Planting trees and vegetation renewal involved absorbing carbon dioxide from the atmosphere and was a solution against the climate incidents that were more than floods and landslides.");


        strategies.add("\nClimate-resilient Infrastructure: It is planning and performing the construction of an infrastructure that will stand up to the catastrophic heat of climate change, including, for instance, stronger buildings can withstand hurricanes, flood barriers, and drought-forgiving water systems.");


        strategies.add("\nInvestment in Renewable Energy: The switch from non-renewable energies to renewable sources of energy, like solar, wind, and hydroelectric power, might reduce the level of carbon dioxide in their environment minimizing the amount of greenhouse gases and therefore reducing the frequency of temperature increase which, frequently, brings about enhanced hurricanes and wildfires.");


        strategies.add("\nCoastal Zone Management: Adopt and enact policies and strategies which help to manage coastal ecosystems by focusing on mangroves and other natural coastal barriers to reduce storm impact and erosion in communities that are dependent on these habitats.");


        strategies.add("\nEducation and Awareness: Many people lack the vividness of the main causes and effects of the climate change alongside actions that could be taken to uphold the impacts as such a consciousness is vital to raise massive backing from the society in fight against the climate change.");
        
    }

    // Method to add a new strategy
    public void addStrategy(String newStrategy) {
        strategies.add(newStrategy);
        System.out.println("New strategy added: " + newStrategy);
    }

    // Method to edit an existing strategy
    public void editStrategy(int index, String updatedStrategy) {
        if (index >= 0 && index < strategies.size()) {
            strategies.set(index, updatedStrategy);
            System.out.println("Strategy updated at index " + index + ": " + updatedStrategy);
        } else {
            System.out.println("Invalid index for editing strategy");
        }
    }

    // Method to delete an existing strategy
    public void deleteStrategy(int index) {
        if (index >= 0 && index < strategies.size()) {
            String deletedStrategy = strategies.remove(index);
            System.out.println("Strategy deleted at index " + index + ": " + deletedStrategy);
        } else {
            System.out.println("Invalid index for deleting strategy");
        }
    }

    // Method to display all strategies
    public void displayStrategies() {
        System.out.println("Current Strategies:");
        for (int i = 1; i < strategies.size(); i++) {
            System.out.println(i + ": " + strategies.get(i));
        }
    }

    public boolean runAdminFunctions() {
        Scanner scanner = new Scanner(System.in);

        while (true) {
            System.out.println("\nChoose an option:");
            System.out.println("1. Read Strategy");
            System.out.println("2. Add Strategy");
            System.out.println("3. Edit Strategy");
            System.out.println("4. Delete Strategy");
            System.out.println("5. Exit");
            int choice = scanner.nextInt();
            scanner.nextLine(); // Consume newline

            if (choice == 5) {
                System.out.println("Exiting Admin functions.");
                return true; // Return true to indicate exiting
            }

            switch (choice) {
                case 1:
                    displayStrategies();
                    break;
                case 2:
                    System.out.println("Enter the new strategy:");
                    String newStrategy = scanner.nextLine();
                    addStrategy(newStrategy);
                    break;
                case 3:
                    System.out.println("Enter the index of the strategy to edit:");
                    int indexToUpdate = getValidIndex(scanner);
                    if (indexToUpdate != -1) {
                        System.out.println("Enter the updated strategy:");
                        String updatedStrategy = scanner.nextLine();
                        editStrategy(indexToUpdate, updatedStrategy);
                    }
                    break;
                case 4:
                    System.out.println("Enter the index of the strategy to delete:");
                    int indexToDelete = getValidIndex(scanner);
                    if (indexToDelete != -1) {
                        deleteStrategy(indexToDelete);
                    }
                    break;
                default:
                    System.out.println("Invalid option.");
            }
        }
    }

    // Method to get a valid index from the user
    private static int getValidIndex(Scanner scanner) {
        while (true) {
            try {
                int index = scanner.nextInt();
                scanner.nextLine(); // Consume newline
                return index;
            } catch (Exception e) {
                System.out.println("Invalid input. Please enter a valid index:");
                scanner.nextLine(); // Consume invalid input
            }
        }
    }

    public List<String> getStrategies() {
        return strategies;
    }
}
